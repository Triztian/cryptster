package main

const (
	BLOCK_SIZE byte = 128
	ROUNDS     int  = 10
	AES_N      int  = 16
	B          int  = 176
)

var sBOX [][]byte = [][]byte{
	//      0      1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
	/* 0 */ {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
	/* 1 */ {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
	/* 2 */ {0xb7, 0xfd, 0x93, 0x26, 0x35, 0x3f, 0xf7, 0xcc, 0x34, 0xe5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
	/* 3 */ {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
	/* 4 */ {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
	/* 5 */ {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
	/* 6 */ {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
	/* 7 */ {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
	/* 8 */ {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
	/* 9 */ {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
	/* A */ {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
	/* B */ {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
	/* C */ {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
	/* D */ {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
	/* E */ {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
	/* F */ {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16},
}

var rCON [256]byte = [256]byte{
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
}

var GALOIS [4][4]byte = [4][4]byte{
	{0x02, 0x03, 0x01, 0x01},
	{0x01, 0x02, 0x03, 0x01},
	{0x01, 0x01, 0x02, 0x03},
	{0x03, 0x01, 0x01, 0x03},
}

// Round keys are derived from the cipher key using Rijndael's key schedule.
// AES requires a separate 128-bit round key block for each round plus one more.
//
func keyExpansion(cipherkeys [4][4]byte) [(ROUNDS + 1) * 4][4]byte {
	var keys [(ROUNDS + 1) * 4][4]byte

	// Copy the first N bytes
	for i := 0; i < 4; i++ {
		keys[i] = cipherkeys[i]
	}

	for i := 4; i < (ROUNDS+1)*4; i++ {
		if i%4 == 0 {
			keys[i] = keyScheduleCore(keys[i-1], keys[i-4], i/4)
		} else {
			var ki [4]byte
			for b := 0; b < 4; b++ {
				ki[b] = keys[i-1][b] ^ keys[i-4][b]
			}
			keys[i] = ki
		}
	}
	return keys
}

// Calculates the i-nth uint3 of the keys
// w4 is the i-4 nth key byte array
func keyScheduleCore(w1, w4 [4]byte, round int) [4]byte {
	var bs [4]byte
	out := GetInt32(w1[:])

	// RotWord
	out = (out << 8) | (out >> 24)
	for i, b := range GetBytes32(out) {
		bs[i] = subByte(b)
	}

	for i, wb := range w1 {
		bs[i] ^= wb
		if i == 0 {
			bs[i] ^= rCON[round]
		} else {
			bs[i] ^= 0x00
		}
	}

	return bs
}

// Obtain the subbyte S-Box value for the given byte
func subByte(b byte) byte {
	return sBOX[int(b>>4)][int((b<<4)>>4)]
}

// The Rijndael S-box is a matrix (square array of numbers) used in the Rijndael cipher,
// which the Advanced Encryption Standard (AES) cryptographic algorithm was based on.[1]
// The S-box (substitution box) serves as a lookup table.
func subBytes(state [4][4]byte) [4][4]byte {
	var s [4][4]byte
	for j, word := range state {
		for i := 0; i < 4; i++ {
			s[j][i] = subByte(word[i])
		}
	}
	return s
}

// Obtain a block from the given data
func getBlock(data []byte) [4][4]byte {
	var block [4][4]byte
	l := len(data)
	for j := 0; j < 4; j++ {
		for i := 0; i < 4; i++ {
			idx := j*4 + i
			if idx < l {
				block[j][i] = data[idx]
			} else {
				block[j][i] = 0x00
			}
		}
	}
	return block
}

func xorBlocks(a, b [4][4]byte) [4][4]byte {
	var x [4][4]byte
	for j := 0; j < 4; j++ {
		for i := 0; i < 4; i++ {
			x[j][i] = a[j][i] * b[j][i]
		}
	}

	return x
}

// Perform the shift rows operation
func shiftRows(block [4][4]byte) [4][4]byte {
	//fmt.Println("ShiftRows: ", block)
	var words [4]uint32

	for n := 0; n < 4; n++ {
		words[n] = GetInt32(block[n][:])
		if n > 0 {
			words[n] = Lrot32(words[n], uint32(n))
		}
		tmp := GetBytes32(words[n])
		block[n] = [4]byte{tmp[0], tmp[1], tmp[2], tmp[3]}
	}

	return block
}

func mixColumns(block [4][4]byte) [4][4]byte {
	var m [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			m[i][j] = 0
			for k := 0; k < 4; k++ {
				m[i][j] += block[i][k] * GALOIS[k][j]
			}
		}
	}

	return m
}

// Perform AES CBC encription of data
func aesCBC128(plaintext []byte, cipherkey [4][4]byte) []byte {
	var states [AES_N][4][4]byte
	var ciphertext []byte

	// Generate the keys to be used for each round
	// keys[ROUNDS][4][4]
	roundKeys := keyExpansion(cipherkey)
	//fmt.Println("RoundKeys: ", roundKeys)

	blockSize := int(BLOCK_SIZE)

	//fmt.Println("Message Len (byte): ", len(plaintext))
	for len(plaintext)%(blockSize/8) != 0 {
		plaintext = append(plaintext, 0x00)
	}

	/*
		fmt.Println("Message Len (byte): ", len(plaintext))
		fmt.Println("Message: ", plaintext)
	*/

	var blocks [][4][4]byte
	for b := 0; b < len(plaintext); b++ {
		var block [4][4]byte
		for i := 0; i < 4; i++ {
			for j := 0; j < 4; j++ {
				x := b*(blockSize/8)*i + j
				if x >= len(plaintext) {
					x = len(plaintext) - 1
				}
				block[i][j] = plaintext[x]
			}
		}

		blocks = append(blocks, block)
	}

	for _, block := range blocks {

		for round := 0; round < ROUNDS; round++ {
			//		fmt.Println("Round: ", round)
			var key [4][4]byte

			for k := 0; k < 4; k++ {
				copy(key[k][:], roundKeys[round][:])
			}

			if round == 0 {
				//AddRoundKey
				states[round] = xorBlocks(key, block)
				continue
			}

			states[round] = subBytes(states[round])
			states[round] = shiftRows(states[round])

			if round < ROUNDS {
				states[round] = mixColumns(states[round])
			}

			//AddRoundKey
			states[round] = xorBlocks(states[round], block)
		}
	}

	for _, state := range states {
		for i := 0; i < 4; i++ {
			for j := 0; j < 4; j++ {
				ciphertext = append(ciphertext, state[i][j])
			}
		}
	}

	return ciphertext
}
